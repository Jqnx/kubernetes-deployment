---
- name: Create the directory for the kubernetes_config_file
  ansible.builtin.file:
    path: "{{ kubernetes_kubeadm_kubelet_config_file_path | dirname }}"
    state: directory
    mode: "0755"

- name: Deploy the config-file for kubeadm and kubelet
  ansible.builtin.template:
    src: "kubeadm-kubelet-config.j2"
    dest: "{{ kubernetes_kubeadm_kubelet_config_file_path }}"
    mode: "0644"

- name: Initialize Kubernetes control plane with kubeadm init
  ansible.builtin.command: >
    kubeadm init
    --config {{ kubernetes_kubeadm_kubelet_config_file_path }}
    {{ kubernetes_kubeadm_init_extra_opts }}
  register: kubeadmin_init
  changed_when: true
  when: (not kubernetes_init_stat.stat.exists) and (kubernetes_ignore_preflight_errors is not defined)

# - name: Initialize Kubernetes control plane with kubeadm init and ignore_preflight_errors
#   command: >
#     kubeadm init
#     --config {{ kubernetes_kubeadm_kubelet_config_file_path }}
#     --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }}
#     {{ kubernetes_kubeadm_init_extra_opts }}
#   register: kubeadmin_init
#   when: (not kubernetes_init_stat.stat.exists) and (kubernetes_ignore_preflight_errors is defined)

- name: Print the init output to screen.
  ansible.builtin.debug:
    var: kubeadmin_init.stdout
    verbosity: 2
  when: not kubernetes_init_stat.stat.exists

- name: Ensure .kube directory exists.
  ansible.builtin.file:
    path: /home/{{ ansible_facts.env.SUDO_USER }}/.kube
    state: directory
    mode: "0755"

- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  ansible.builtin.file:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_facts.env.SUDO_USER }}/.kube/config
    state: link
    mode: "0644"

- name: Configure Flannel networking.
  ansible.builtin.command: "kubectl apply -f {{ kubernetes_flannel_manifest_file }}"
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"
  when:
    - not kubernetes_using_vagrant
    - kubernetes_pod_network.cni == 'flannel'
  until: flannel_result is not failed
  retries: 12
  delay: 5

- name: Get Flannel manifest.
  ansible.builtin.get_url:
    url: "{{ kubernetes_flannel_manifest_file }}"
    dest: /tmp/kube-flannel.yml
    mode: "0644"
  when: kubernetes_using_vagrant | bool

- name: Add correct interface to flannel.
  ansible.builtin.lineinfile:
    insertafter: '- --kube-subnet-mgr'
    line: '        - --iface=eth1'
    state: present
    path: /tmp/kube-flannel.yml
  when: kubernetes_using_vagrant | bool

- name: Configure Vagrant Flannel networking.
  ansible.builtin.command: "kubectl apply -f /tmp/kube-flannel.yml"
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"
  when:
    - kubernetes_using_vagrant | bool
    - kubernetes_pod_network.cni == 'flannel'
  until: flannel_result is not failed
  retries: 12
  delay: 5

# TODO: Download flannel config with curl and add --iface=eth1 to the manifest
# with line_infile for usage with vagrant

# - name: Configure Calico networking.
#   command: "kubectl apply -f {{ kubernetes_calico_manifest_file }}"
#   register: calico_result
#   changed_when: "'created' in calico_result.stdout"
#   when: kubernetes_pod_network.cni == 'calico'
#   until: calico_result is not failed
#   retries: 12
#   delay: 5
#
# - name: Get Kubernetes version for Weave installation.
#   shell: kubectl version | base64 | tr -d '\n'
#   changed_when: false
#   register: kubectl_version
#   when: kubernetes_pod_network.cni == 'weave'
#   until: kubectl_version is not failed
#   retries: 12
#   delay: 5
#
# - name: Configure Weave networking.
#   command: "{{ item }}"
#   with_items:
#     - "kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout_lines[0] }}"
#   register: weave_result
#   changed_when: "'created' in weave_result.stdout"
#   when: kubernetes_pod_network.cni == 'weave'

# TODO: Check if taint exists with something like `kubectl describe nodes`
# instead of using kubernetes_init_stat.stat.exists check.
- name: Allow pods on control plane (if configured).
  ansible.builtin.command: "kubectl taint nodes --all node-role.kubernetes.io/control-plane-"
  when:
    - kubernetes_allow_pods_on_control_plane | bool
    - not kubernetes_init_stat.stat.exists
  changed_when: true
